{"version":3,"sources":["images/crop-1.jpg","data.js","postprocessing/Pass.js","postprocessing/MaskPass.js","postprocessing/ShaderPass.js","shaders/CopyShader.js","postprocessing/EffectComposer.js","postprocessing/RenderPass.js","shaders/DigitalGlitch.js","postprocessing/GlitchPass.js","index.js"],"names":["module","exports","__webpack_require__","p","data","img1","Pass","this","enabled","needsSwap","clear","renderToScreen","Object","assign","prototype","setSize","width","height","render","renderer","writeBuffer","readBuffer","deltaTime","maskActive","console","error","MaskPass","scene","camera","call","inverse","create","constructor","writeValue","clearValue","context","state","buffers","color","setMask","depth","setLocked","stencil","setTest","setOp","REPLACE","setFunc","ALWAYS","setClear","setRenderTarget","EQUAL","KEEP","ClearMaskPass","ShaderPass","shader","textureID","undefined","ShaderMaterial","uniforms","material","UniformsUtils","clone","defines","vertexShader","fragmentShader","OrthographicCamera","Scene","quad","Mesh","PlaneBufferGeometry","frustumCulled","add","value","texture","CopyShader","tDiffuse","opacity","join","EffectComposer","renderTarget","parameters","minFilter","LinearFilter","magFilter","format","RGBAFormat","stencilBuffer","size","getDrawingBufferSize","Vector2","WebGLRenderTarget","name","renderTarget1","renderTarget2","passes","copyPass","_previousFrameTime","Date","now","swapBuffers","tmp","addPass","pass","push","insertPass","index","splice","i","currentRenderTarget","getRenderTarget","il","length","stencilFunc","NOTEQUAL","reset","dispose","RenderPass","overrideMaterial","clearColor","clearAlpha","clearDepth","oldClearColor","oldClearAlpha","oldAutoClear","autoClear","getClearColor","getHex","getClearAlpha","setClearColor","autoClearColor","autoClearDepth","autoClearStencil","DigitalGlitch","tDisp","byp","amount","angle","seed","seed_x","seed_y","distortion_x","distortion_y","col_s","GlitchPass","dt_size","generateHeightmap","factor","Image","_ref","url","scale","props","objectWithoutProperties","useMemo","THREE","load","_useState","useState","_useState2","slicedToArray","hovered","setHover","hover","useCallback","unhover","useSpring","react_default","a","createElement","three","mesh","onHover","onUnhover","interpolate","f","attach","args","meshLambertMaterial","transparent","object","Text","_ref2","children","position","_ref2$color","_ref2$fontSize","fontSize","_useThree","useThree","_useThree$size","_useThree$viewport","viewport","viewportWidth","viewportHeight","canvas","document","getContext","font","concat","textAlign","textBaseline","fillStyle","fillText","sprite","spriteMaterial","image","premultiplyAlpha","onUpdate","s","needsUpdate","Background","_ref3","meshBasicMaterial","depthTest","Stars","_ref4","group","useRef","theta","useRender","r","Math","sin","degToRad","cos","current","rotation","set","_useMemo","Array","fill","map","random","_useMemo2","geo","mat","coords","ref","_ref5","_ref6","p1","p2","p3","key","geometry","max","_Math","randFloat","PI","data_arr","Float32Array","val","DataTexture","RGBFormat","FloatType","applySpring","applyThree","Effects","React","memo","_ref7","_useThree3","gl","composer","useEffect","attachArray","glitchPass","Images","_ref8","top","mouse","scrollMax","_ref9","_ref10","x","y","z","_ref11","Fragment","spotLight","intensity","Main","_useSpring2","_useSpring3","_useSpring3$","onMouseMove","_ref12","clientX","clientY","window","innerWidth","innerHeight","onScroll","e","target","scrollTop","dist","className","style","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.8be574d0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/crop-1.55592ea0.jpg\";","import img1 from './images/crop-1.jpg'\r\n\r\nexport default [\r\n  [img1, -0.5585486420134362, -3.9373147490685803, 5, 0, 0.75]\r\n]\r\n","var Pass = function() {\r\n  // if set to true, the pass is processed by the composer\r\n  this.enabled = true\r\n\r\n  // if set to true, the pass indicates to swap read and write buffer after rendering\r\n  this.needsSwap = true\r\n\r\n  // if set to true, the pass clears its buffer before rendering\r\n  this.clear = false\r\n\r\n  // if set to true, the result of the pass is rendered to screen\r\n  this.renderToScreen = false\r\n}\r\n\r\nObject.assign(Pass.prototype, {\r\n  setSize: function(width, height) {},\r\n\r\n  render: function(renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\r\n    console.error('THREE.Pass: .render() must be implemented in derived pass.')\r\n  },\r\n})\r\n\r\nexport { Pass }","import { Pass } from './Pass.js'\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nvar MaskPass = function(scene, camera) {\r\n  Pass.call(this)\r\n\r\n  this.scene = scene\r\n  this.camera = camera\r\n\r\n  this.clear = true\r\n  this.needsSwap = false\r\n\r\n  this.inverse = false\r\n}\r\n\r\nMaskPass.prototype = Object.assign(Object.create(Pass.prototype), {\r\n  constructor: MaskPass,\r\n\r\n  render: function(renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\r\n    var context = renderer.context\r\n    var state = renderer.state\r\n\r\n    // don't update color or depth\r\n\r\n    state.buffers.color.setMask(false)\r\n    state.buffers.depth.setMask(false)\r\n\r\n    // lock buffers\r\n\r\n    state.buffers.color.setLocked(true)\r\n    state.buffers.depth.setLocked(true)\r\n\r\n    // set up stencil\r\n\r\n    var writeValue, clearValue\r\n\r\n    if (this.inverse) {\r\n      writeValue = 0\r\n      clearValue = 1\r\n    } else {\r\n      writeValue = 1\r\n      clearValue = 0\r\n    }\r\n\r\n    state.buffers.stencil.setTest(true)\r\n    state.buffers.stencil.setOp(context.REPLACE, context.REPLACE, context.REPLACE)\r\n    state.buffers.stencil.setFunc(context.ALWAYS, writeValue, 0xffffffff)\r\n    state.buffers.stencil.setClear(clearValue)\r\n\r\n    // draw into the stencil buffer\r\n\r\n    renderer.setRenderTarget(readBuffer)\r\n    if (this.clear) renderer.clear()\r\n    renderer.render(this.scene, this.camera)\r\n\r\n    renderer.setRenderTarget(writeBuffer)\r\n    if (this.clear) renderer.clear()\r\n    renderer.render(this.scene, this.camera)\r\n\r\n    // unlock color and depth buffer for subsequent rendering\r\n\r\n    state.buffers.color.setLocked(false)\r\n    state.buffers.depth.setLocked(false)\r\n\r\n    // only render where stencil is set to 1\r\n\r\n    state.buffers.stencil.setFunc(context.EQUAL, 1, 0xffffffff) // draw if == 1\r\n    state.buffers.stencil.setOp(context.KEEP, context.KEEP, context.KEEP)\r\n  },\r\n})\r\n\r\nvar ClearMaskPass = function() {\r\n  Pass.call(this)\r\n\r\n  this.needsSwap = false\r\n}\r\n\r\nClearMaskPass.prototype = Object.create(Pass.prototype)\r\n\r\nObject.assign(ClearMaskPass.prototype, {\r\n  render: function(renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\r\n    renderer.state.buffers.stencil.setTest(false)\r\n  },\r\n})\r\n\r\nexport { ClearMaskPass, MaskPass }\r\n","import { Mesh, OrthographicCamera, PlaneBufferGeometry, Scene, ShaderMaterial, UniformsUtils } from 'three/src/Three'\r\nimport { Pass } from './Pass.js'\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nvar ShaderPass = function(shader, textureID) {\r\n  Pass.call(this)\r\n\r\n  this.textureID = textureID !== undefined ? textureID : 'tDiffuse'\r\n\r\n  if (shader instanceof ShaderMaterial) {\r\n    this.uniforms = shader.uniforms\r\n\r\n    this.material = shader\r\n  } else if (shader) {\r\n    this.uniforms = UniformsUtils.clone(shader.uniforms)\r\n\r\n    this.material = new ShaderMaterial({\r\n      defines: Object.assign({}, shader.defines),\r\n      uniforms: this.uniforms,\r\n      vertexShader: shader.vertexShader,\r\n      fragmentShader: shader.fragmentShader,\r\n    })\r\n  }\r\n\r\n  this.camera = new OrthographicCamera(-1, 1, 1, -1, 0, 1)\r\n  this.scene = new Scene()\r\n\r\n  this.quad = new Mesh(new PlaneBufferGeometry(2, 2), null)\r\n  this.quad.frustumCulled = false // Avoid getting clipped\r\n  this.scene.add(this.quad)\r\n}\r\n\r\nShaderPass.prototype = Object.assign(Object.create(Pass.prototype), {\r\n  constructor: ShaderPass,\r\n\r\n  render: function(renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\r\n    if (this.uniforms[this.textureID]) {\r\n      this.uniforms[this.textureID].value = readBuffer.texture\r\n    }\r\n\r\n    this.quad.material = this.material\r\n\r\n    if (this.renderToScreen) {\r\n      renderer.setRenderTarget(null)\r\n      renderer.render(this.scene, this.camera)\r\n    } else {\r\n      renderer.setRenderTarget(writeBuffer)\r\n      if (this.clear) renderer.clear()\r\n      renderer.render(this.scene, this.camera)\r\n    }\r\n  },\r\n})\r\n\r\nexport { ShaderPass }\r\n","/**\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * Full-screen textured quad shader\r\n */\r\n\r\nvar CopyShader = {\r\n  uniforms: {\r\n    tDiffuse: { value: null },\r\n    opacity: { value: 1.0 },\r\n  },\r\n\r\n  vertexShader: [\r\n    'varying vec2 vUv;',\r\n    'void main() {',\r\n    'vUv = uv;',\r\n    'gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\r\n    '}',\r\n  ].join('\\n'),\r\n\r\n  fragmentShader: [\r\n    'uniform float opacity;',\r\n    'uniform sampler2D tDiffuse;',\r\n    'varying vec2 vUv;',\r\n    'void main() {',\r\n    'vec4 texel = texture2D( tDiffuse, vUv );',\r\n    'gl_FragColor = opacity * texel;',\r\n    '}',\r\n  ].join('\\n'),\r\n}\r\n\r\nexport { CopyShader }\r\n","import { ClearMaskPass, MaskPass } from './MaskPass.js'\r\nimport { ShaderPass } from './ShaderPass.js'\r\nimport { CopyShader } from '../shaders/CopyShader.js'\r\nimport { LinearFilter, RGBAFormat, Vector2, WebGLRenderTarget } from 'three/src/Three'\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nvar EffectComposer = function(renderer, renderTarget) {\r\n  this.renderer = renderer\r\n\r\n  if (renderTarget === undefined) {\r\n    var parameters = {\r\n      minFilter: LinearFilter,\r\n      magFilter: LinearFilter,\r\n      format: RGBAFormat,\r\n      stencilBuffer: false,\r\n    }\r\n\r\n    var size = renderer.getDrawingBufferSize(new Vector2())\r\n    renderTarget = new WebGLRenderTarget(size.width, size.height, parameters)\r\n    renderTarget.texture.name = 'EffectComposer.rt1'\r\n  }\r\n\r\n  this.renderTarget1 = renderTarget\r\n  this.renderTarget2 = renderTarget.clone()\r\n  this.renderTarget2.texture.name = 'EffectComposer.rt2'\r\n  this.writeBuffer = this.renderTarget1\r\n  this.readBuffer = this.renderTarget2\r\n  this.passes = []\r\n\r\n  // dependencies\r\n  if (CopyShader === undefined) {\r\n    console.error('THREE.EffectComposer relies on THREE.CopyShader')\r\n  }\r\n  if (ShaderPass === undefined) {\r\n    console.error('THREE.EffectComposer relies on THREE.ShaderPass')\r\n  }\r\n  this.copyPass = new ShaderPass(CopyShader)\r\n  this._previousFrameTime = Date.now()\r\n}\r\n\r\nObject.assign(EffectComposer.prototype, {\r\n  swapBuffers: function() {\r\n    var tmp = this.readBuffer\r\n    this.readBuffer = this.writeBuffer\r\n    this.writeBuffer = tmp\r\n  },\r\n\r\n  addPass: function(pass) {\r\n    this.passes.push(pass)\r\n    var size = this.renderer.getDrawingBufferSize(new Vector2())\r\n    pass.setSize(size.width, size.height)\r\n  },\r\n\r\n  insertPass: function(pass, index) {\r\n    this.passes.splice(index, 0, pass)\r\n  },\r\n\r\n  render: function(deltaTime) {\r\n    // deltaTime value is in seconds\r\n    if (deltaTime === undefined) {\r\n      deltaTime = (Date.now() - this._previousFrameTime) * 0.001\r\n    }\r\n    this._previousFrameTime = Date.now()\r\n    var currentRenderTarget = this.renderer.getRenderTarget()\r\n    var maskActive = false\r\n    var pass,\r\n      i,\r\n      il = this.passes.length\r\n\r\n    for (i = 0; i < il; i++) {\r\n      pass = this.passes[i]\r\n      if (pass.enabled === false) continue\r\n\r\n      pass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive)\r\n      if (pass.needsSwap) {\r\n        if (maskActive) {\r\n          var context = this.renderer.context\r\n          context.stencilFunc(context.NOTEQUAL, 1, 0xffffffff)\r\n          this.copyPass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime)\r\n          context.stencilFunc(context.EQUAL, 1, 0xffffffff)\r\n        }\r\n        this.swapBuffers()\r\n      }\r\n      if (MaskPass !== undefined) {\r\n        if (pass instanceof MaskPass) {\r\n          maskActive = true\r\n        } else if (pass instanceof ClearMaskPass) {\r\n          maskActive = false\r\n        }\r\n      }\r\n    }\r\n    this.renderer.setRenderTarget(currentRenderTarget)\r\n  },\r\n\r\n  reset: function(renderTarget) {\r\n    if (renderTarget === undefined) {\r\n      var size = this.renderer.getDrawingBufferSize(new Vector2())\r\n      renderTarget = this.renderTarget1.clone()\r\n      renderTarget.setSize(size.width, size.height)\r\n    }\r\n    this.renderTarget1.dispose()\r\n    this.renderTarget2.dispose()\r\n    this.renderTarget1 = renderTarget\r\n    this.renderTarget2 = renderTarget.clone()\r\n    this.writeBuffer = this.renderTarget1\r\n    this.readBuffer = this.renderTarget2\r\n  },\r\n  setSize: function(width, height) {\r\n    this.renderTarget1.setSize(width, height)\r\n    this.renderTarget2.setSize(width, height)\r\n    for (var i = 0; i < this.passes.length; i++) {\r\n      this.passes[i].setSize(width, height)\r\n    }\r\n  },\r\n})\r\n\r\nexport { EffectComposer }\r\n","import { Pass } from './Pass.js'\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nvar RenderPass = function(scene, camera, overrideMaterial, clearColor, clearAlpha) {\r\n  Pass.call(this)\r\n\r\n  this.scene = scene\r\n  this.camera = camera\r\n\r\n  this.overrideMaterial = overrideMaterial\r\n\r\n  this.clearColor = clearColor\r\n  this.clearAlpha = clearAlpha !== undefined ? clearAlpha : 0\r\n\r\n  this.clear = true\r\n  this.clearDepth = false\r\n  this.needsSwap = false\r\n}\r\n\r\nRenderPass.prototype = Object.assign(Object.create(Pass.prototype), {\r\n  constructor: RenderPass,\r\n\r\n  render: function(renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\r\n    var oldAutoClear = renderer.autoClear\r\n    renderer.autoClear = false\r\n\r\n    this.scene.overrideMaterial = this.overrideMaterial\r\n\r\n    var oldClearColor, oldClearAlpha\r\n\r\n    if (this.clearColor) {\r\n      oldClearColor = renderer.getClearColor().getHex()\r\n      oldClearAlpha = renderer.getClearAlpha()\r\n\r\n      renderer.setClearColor(this.clearColor, this.clearAlpha)\r\n    }\r\n\r\n    if (this.clearDepth) {\r\n      renderer.clearDepth()\r\n    }\r\n\r\n    renderer.setRenderTarget(this.renderToScreen ? null : readBuffer)\r\n\r\n    // TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\r\n    if (this.clear) renderer.clear(renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil)\r\n    renderer.render(this.scene, this.camera)\r\n\r\n    if (this.clearColor) {\r\n      renderer.setClearColor(oldClearColor, oldClearAlpha)\r\n    }\r\n\r\n    this.scene.overrideMaterial = null\r\n    renderer.autoClear = oldAutoClear\r\n  },\r\n})\r\n\r\nexport { RenderPass }\r\n","/**\r\n * @author felixturner / http://airtight.cc/\r\n *\r\n * RGB Shift Shader\r\n * Shifts red and blue channels from center in opposite directions\r\n * Ported from http://kriss.cx/tom/2009/05/rgb-shift/\r\n * by Tom Butterworth / http://kriss.cx/tom/\r\n *\r\n * amount: shift distance (1 is width of input)\r\n * angle: shift angle in radians\r\n */\r\n\r\nvar DigitalGlitch = {\r\n  uniforms: {\r\n    tDiffuse: { value: null }, //diffuse texture\r\n    tDisp: { value: null }, //displacement texture for digital glitch squares\r\n    byp: { value: 0 }, //apply the glitch ?\r\n    amount: { value: 0.08 },\r\n    angle: { value: 0.02 },\r\n    seed: { value: 0.02 },\r\n    seed_x: { value: 0.02 }, //-1,1\r\n    seed_y: { value: 0.02 }, //-1,1\r\n    distortion_x: { value: 0.5 },\r\n    distortion_y: { value: 0.6 },\r\n    col_s: { value: 0.05 },\r\n  },\r\n\r\n  vertexShader: [\r\n    'varying vec2 vUv;',\r\n    'void main() {',\r\n    'vUv = uv;',\r\n    'gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\r\n    '}',\r\n  ].join('\\n'),\r\n\r\n  fragmentShader: [\r\n    'uniform int byp;', //should we apply the glitch ?\r\n    'uniform sampler2D tDiffuse;',\r\n    'uniform sampler2D tDisp;',\r\n    'uniform float amount;',\r\n    'uniform float angle;',\r\n    'uniform float seed;',\r\n    'uniform float seed_x;',\r\n    'uniform float seed_y;',\r\n    'uniform float distortion_x;',\r\n    'uniform float distortion_y;',\r\n    'uniform float col_s;',\r\n    'varying vec2 vUv;',\r\n    'float rand(vec2 co){',\r\n    'return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);',\r\n    '}',\r\n    'void main() {',\r\n    'if(byp<1) {',\r\n    'vec2 p = vUv;',\r\n    'float xs = floor(gl_FragCoord.x / 0.5);',\r\n    'float ys = floor(gl_FragCoord.y / 0.5);',\r\n    //based on staffantans glitch shader for unity https://github.com/staffantan/unityglitch\r\n    'vec4 normal = texture2D (tDisp, p*seed*seed);',\r\n    'if(p.y<distortion_x+col_s && p.y>distortion_x-col_s*seed) {',\r\n    'if(seed_x>0.){',\r\n    'p.y = 1. - (p.y + distortion_y);',\r\n    '}',\r\n    'else {',\r\n    'p.y = distortion_y;',\r\n    '}',\r\n    '}',\r\n    'if(p.x<distortion_y+col_s && p.x>distortion_y-col_s*seed) {',\r\n    'if(seed_y>0.){',\r\n    'p.x=distortion_x;',\r\n    '}',\r\n    'else {',\r\n    'p.x = 1. - (p.x + distortion_x);',\r\n    '}',\r\n    '}',\r\n    'p.x+=normal.x*seed_x*(seed/5.);',\r\n    'p.y+=normal.y*seed_y*(seed/5.);',\r\n    //base from RGB shift shader\r\n    'vec2 offset = amount * vec2( cos(angle), sin(angle));',\r\n    'vec4 cr = texture2D(tDiffuse, p + offset);',\r\n    'vec4 cga = texture2D(tDiffuse, p);',\r\n    'vec4 cb = texture2D(tDiffuse, p - offset);',\r\n    'gl_FragColor = vec4(cr.r, cga.g, cb.b, cga.a);',\r\n    //add noise\r\n    'vec4 snow = 200.*amount*vec4(rand(vec2(xs * seed,ys * seed*50.))*0.05);',\r\n    'gl_FragColor = gl_FragColor+ snow;',\r\n    '}',\r\n    'else {',\r\n    'gl_FragColor=texture2D (tDiffuse, vUv);',\r\n    '}',\r\n    '}',\r\n  ].join('\\n'),\r\n}\r\n\r\nexport { DigitalGlitch }\r\n","import {\r\n  DataTexture,\r\n  FloatType,\r\n  Math as _Math,\r\n  Mesh,\r\n  OrthographicCamera,\r\n  PlaneBufferGeometry,\r\n  RGBFormat,\r\n  Scene,\r\n  ShaderMaterial,\r\n  UniformsUtils,\r\n} from 'three/src/Three'\r\nimport { DigitalGlitch } from '../shaders/DigitalGlitch.js'\r\nimport { Pass } from './Pass.js'\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nvar GlitchPass = function(dt_size) {\r\n  Pass.call(this)\r\n  if (DigitalGlitch === undefined) console.error('THREE.GlitchPass relies on THREE.DigitalGlitch')\r\n  var shader = DigitalGlitch\r\n  this.uniforms = UniformsUtils.clone(shader.uniforms)\r\n  if (dt_size === undefined) dt_size = 64\r\n  this.uniforms['tDisp'].value = this.generateHeightmap(dt_size)\r\n  this.material = new ShaderMaterial({\r\n    uniforms: this.uniforms,\r\n    vertexShader: shader.vertexShader,\r\n    fragmentShader: shader.fragmentShader,\r\n  })\r\n  this.camera = new OrthographicCamera(-1, 1, 1, -1, 0, 1)\r\n  this.scene = new Scene()\r\n  this.quad = new Mesh(new PlaneBufferGeometry(2, 2), null)\r\n  this.quad.frustumCulled = false // Avoid getting clipped\r\n  this.scene.add(this.quad)\r\n  this.factor = 0\r\n}\r\n\r\nGlitchPass.prototype = Object.assign(Object.create(Pass.prototype), {\r\n  constructor: GlitchPass,\r\n\r\n  render: function(renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\r\n    const factor = Math.max(0, this.factor)\r\n    this.uniforms['tDiffuse'].value = readBuffer.texture\r\n    this.uniforms['seed'].value = Math.random() * factor //default seeding\r\n    this.uniforms['byp'].value = 0\r\n    if (factor) {\r\n      this.uniforms['amount'].value = (Math.random() / 90) * factor\r\n      this.uniforms['angle'].value = _Math.randFloat(-Math.PI, Math.PI) * factor\r\n      this.uniforms['distortion_x'].value = _Math.randFloat(0, 1) * factor\r\n      this.uniforms['distortion_y'].value = _Math.randFloat(0, 1) * factor\r\n      this.uniforms['seed_x'].value = _Math.randFloat(-0.3, 0.3) * factor\r\n      this.uniforms['seed_y'].value = _Math.randFloat(-0.3, 0.3) * factor\r\n    } else this.uniforms['byp'].value = 1\r\n    this.quad.material = this.material\r\n    if (this.renderToScreen) {\r\n      renderer.setRenderTarget(null)\r\n      renderer.render(this.scene, this.camera)\r\n    } else {\r\n      renderer.setRenderTarget(writeBuffer)\r\n      if (this.clear) renderer.clear()\r\n      renderer.render(this.scene, this.camera)\r\n    }\r\n  },\r\n\r\n  generateHeightmap: function(dt_size) {\r\n    var data_arr = new Float32Array(dt_size * dt_size * 3)\r\n    var length = dt_size * dt_size\r\n\r\n    for (var i = 0; i < length; i++) {\r\n      var val = _Math.randFloat(0, 1)\r\n      data_arr[i * 3 + 0] = val\r\n      data_arr[i * 3 + 1] = val\r\n      data_arr[i * 3 + 2] = val\r\n    }\r\n\r\n    var texture = new DataTexture(data_arr, dt_size, dt_size, RGBFormat, FloatType)\r\n    texture.needsUpdate = true\r\n    return texture\r\n  },\r\n})\r\n\r\nexport { GlitchPass }\r\n","import ReactDOM from 'react-dom'\nimport * as THREE from 'three/src/Three'\nimport React, { useState, useRef, useEffect, useCallback, useMemo } from 'react'\n// A THREE.js React renderer, see: https://github.com/drcmda/react-three-fiber\nimport { apply as applyThree, Canvas, useRender, useThree } from 'react-three-fiber'\n// A React animation lib, see: https://github.com/react-spring/react-spring\nimport { apply as applySpring, useSpring, a, interpolate } from 'react-spring/three'\nimport data from './data'\nimport './styles.css'\n\n// Import and register postprocessing classes as three-native-elements for both react-three-fiber & react-spring\n// They'll be available as native elements <effectComposer /> from then on ...\nimport { EffectComposer } from './postprocessing/EffectComposer'\nimport { RenderPass } from './postprocessing/RenderPass'\nimport { GlitchPass } from './postprocessing/GlitchPass'\napplySpring({ EffectComposer, RenderPass, GlitchPass })\napplyThree({ EffectComposer, RenderPass, GlitchPass })\n\n/** This component loads an image and projects it onto a plane */\nfunction Image({ url, opacity, scale, ...props }) {\n  const texture = useMemo(() => new THREE.TextureLoader().load(url), [url])\n  const [hovered, setHover] = useState(false)\n  const hover = useCallback(() => setHover(true), [])\n  const unhover = useCallback(() => setHover(false), [])\n  const { factor } = useSpring({ factor: hovered ? 1.1 : 1 })\n  return (\n    <a.mesh {...props} onHover={hover} onUnhover={unhover} scale={factor.interpolate(f => [scale * f, scale * f, 1])}>\n      <planeBufferGeometry attach=\"geometry\" args={[5, 5]} />\n      <a.meshLambertMaterial attach=\"material\" transparent opacity={opacity}>\n        <primitive attach=\"map\" object={texture} />\n      </a.meshLambertMaterial>\n    </a.mesh>\n  )\n}\n\n/** This renders text via canvas and projects it as a sprite */\nfunction Text({ children, position, opacity, color = 'white', fontSize = 410 }) {\n  const {\n    size: { width, height },\n    viewport: { width: viewportWidth, height: viewportHeight }\n  } = useThree()\n  const scale = viewportWidth > viewportHeight ? viewportWidth : viewportHeight\n  const canvas = useMemo(\n    () => {\n      const canvas = document.createElement('canvas')\n      canvas.width = canvas.height = 2048\n      const context = canvas.getContext('2d')\n      context.font = `bold ${fontSize}px -apple-system, BlinkMacSystemFont, avenir next, avenir, helvetica neue, helvetica, ubuntu, roboto, noto, segoe ui, arial, sans-serif`\n      context.textAlign = 'center'\n      context.textBaseline = 'middle'\n      context.fillStyle = color\n      context.fillText(children, 1024, 1024 - 410 / 2)\n      return canvas\n    },\n    [children, width, height]\n  )\n  return (\n    <a.sprite scale={[scale, scale, 1]} position={position}>\n      <a.spriteMaterial attach=\"material\" transparent opacity={opacity}>\n        <canvasTexture attach=\"map\" image={canvas} premultiplyAlpha onUpdate={s => (s.needsUpdate = true)} />\n      </a.spriteMaterial>\n    </a.sprite>\n  )\n}\n\n/** This component creates a fullscreen colored plane */\nfunction Background({ color }) {\n  const { viewport } = useThree()\n  return (\n    <mesh scale={[viewport.width, viewport.height, 1]}>\n      <planeGeometry attach=\"geometry\" args={[1, 1]} />\n      <a.meshBasicMaterial attach=\"material\" color={color} depthTest={false} />\n    </mesh>\n  )\n}\n\n/** This component rotates a bunch of stars */\nfunction Stars({ position }) {\n  let group = useRef()\n  let theta = 0\n  useRender(() => {\n    const r = 5 * Math.sin(THREE.Math.degToRad((theta += 0.01)))\n    const s = Math.cos(THREE.Math.degToRad(theta * 2))\n    group.current.rotation.set(r, r, r)\n    group.current.scale.set(s, s, s)\n  })\n  const [geo, mat, coords] = useMemo(() => {\n    const geo = new THREE.SphereBufferGeometry(1, 10, 10)\n    const mat = new THREE.MeshBasicMaterial({ color: new THREE.Color('peachpuff'), transparent: true })\n    const coords = new Array(1000).fill().map(i => [Math.random() * 800 - 400, Math.random() * 800 - 400, Math.random() * 800 - 400])\n    return [geo, mat, coords]\n  }, [])\n  return (\n    <a.group ref={group} position={position}>\n      {coords.map(([p1, p2, p3], i) => (\n        <mesh key={i} geometry={geo} material={mat} position={[p1, p2, p3]} />\n      ))}\n    </a.group>\n  )\n}\n\n/** This component creates a glitch effect */\nconst Effects = React.memo(({ factor }) => {\n  const { gl, scene, camera, size } = useThree()\n  const composer = useRef()\n  useEffect(() => void composer.current.setSize(size.width, size.height), [size])\n  // This takes over as the main render-loop (when 2nd arg is set to true)\n  useRender(() => composer.current.render(), true)\n  return (\n    <effectComposer ref={composer} args={[gl]}>\n      <renderPass attachArray=\"passes\" args={[scene, camera]} />\n      <a.glitchPass attachArray=\"passes\" renderToScreen factor={factor} />\n    </effectComposer>\n  )\n})\n\n/** This component creates a bunch of parallaxed images */\nfunction Images({ top, mouse, scrollMax }) {\n  return data.map(([url, x, y, factor, z, scale], index) => (\n    <Image\n      key={index}\n      url={url}\n      scale={scale}\n      opacity={top.interpolate([0, 500], [0, 1])}\n      position={interpolate([top, mouse], (top, mouse) => [\n        (-mouse[0] * factor) / 50000 + x,\n        (mouse[1] * factor) / 50000 + y * 1.15 + ((top * factor) / scrollMax) * 2,\n        z + top / 2000\n      ])}\n    />\n  ))\n}\n\n/** This component maintains the scene */\nfunction Scene({ top, mouse }) {\n  const { size } = useThree()\n  const scrollMax = size.height * 4.5\n  return (\n    <>\n      <a.spotLight intensity={1.2} color=\"white\" position={mouse.interpolate((x, y) => [x / 100, -y / 100, 6.5])} />\n      <Effects factor={top.interpolate([0, 150], [1, 0])} />\n      <Background color={top.interpolate([0, scrollMax * 0.25, scrollMax * 0.8, scrollMax], ['#27282F', '#247BA0', '#70C1B3', '#f8f3f1'])} />\n      <Stars position={top.interpolate(top => [0, -1 + top / 20, 0])} />\n      <Images top={top} mouse={mouse} scrollMax={scrollMax} />\n      <Text opacity={top.interpolate([0, 200], [1, 0])} position={top.interpolate(top => [0, -1 + top / 200, 0])} fontSize={50}>\n        Soy David Heredia\n      </Text>\n      <Text position={top.interpolate(top => [0, -20 + ((top * 10) / scrollMax) * 2, 0])} color=\"black\" fontSize={50}>\n        Programador de Aplicaciones Android / iOS\n      </Text>\n    </>\n  )\n}\n\n/** Main component */\nexport default function Main() {\n  // This tiny spring right here controlls all(!) the animations, one for scroll, the other for mouse movement ...\n  const [{ top, mouse }, set] = useSpring(() => ({ top: 0, mouse: [0, 0] }))\n  const onMouseMove = useCallback(({ clientX: x, clientY: y }) => set({ mouse: [x - window.innerWidth / 2, y - window.innerHeight / 2] }), [])\n  const onScroll = useCallback(e => set({ top: e.target.scrollTop }), [])\n  return (\n    <>\n      <Canvas className=\"canvas\">\n        <Scene top={top} mouse={mouse} />\n      </Canvas>\n      <div className=\"scroll-container\" onScroll={onScroll} onMouseMove={onMouseMove}>\n        <div style={{ height: '525vh' }} />\n      </div>\n    </>\n  )\n}\n\nReactDOM.render(<Main />, document.getElementById('root'))\n"],"sourceRoot":""}